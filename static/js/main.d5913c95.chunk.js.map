{"version":3,"sources":["lib/fiber.js","lib/concurrent.js","lib/createDOM.js","index.js","lib/createElement.js"],"names":["Fiber","Object","createClass","elem","parent","classCallCheck","this","type","props","child","sibling","dom","alternate","wipRoot","currentRoot","deletions","nextUnitOfWork","commitWork","fiber","effectTag","keys","filter","key","forEach","updateDOM","appendChild","removeChild","workLoop","deadline","shouldYield","performUnitOfWork","timeRemaining","requestIdleCallback","node","document","createTextNode","createElement","createDOM","wipFiber","elements","idx","oldFiber","prevSibling","length","element","newFiber","sameType","push","reconcilerChildren","children","nextFiber","PReact","p","prototype","toString","call","indexOf","constructor","isClassComponent","_len","arguments","Array","_key","objectSpread2","map","nodeValue","render","container","app","id","app2","getElementById","setTimeout"],"mappings":"uIAAaA,EAAbC,OAAAC,EAAA,EAAAD,CAYE,SAAAD,EAAYG,EAAMC,GAASH,OAAAI,EAAA,EAAAJ,CAAAK,KAAAN,GAAAM,KAX3BC,KAAO,KAWmBD,KAV1BE,MAAQ,KAUkBF,KAR1BF,OAAS,KAQiBE,KAP1BG,MAAQ,KAOkBH,KAN1BI,QAAU,KAMgBJ,KAJ1BK,IAAM,KAIoBL,KAF1BM,UAAY,KAGVN,KAAKC,KAAOJ,EAAKI,KACjBD,KAAKE,MAAQL,EAAKK,MAClBF,KAAKF,OAASA,ICZlB,IAAIS,EAAU,KACVC,EAAc,KACdC,EAAY,GACLC,EAAiB,KA+B5B,SAASC,EAAWC,GAClB,GAAKA,EACL,OAAQA,EAAMC,WACZ,IAAK,UAhBT,SAAmBD,GAIjB,IAAMP,EAAMO,EAAMP,IACZH,EAAQU,EAAMV,MACpBP,OAAOmB,KAAKZ,GACTa,OAAO,SAACC,GAAD,MAAiB,aAARA,IAChBC,QAAQ,SAACD,GACRX,EAAIW,GAAOd,EAAMc,KAQjBE,CAAUN,GACVD,EAAWC,EAAMT,OACjBQ,EAAWC,EAAMR,SACjB,MACF,IAAK,MACHQ,EAAMd,OAAOO,IAAIc,YAAYP,EAAMP,KACnCM,EAAWC,EAAMT,OACjBQ,EAAWC,EAAMR,SACjB,MACF,IAAK,SACHQ,EAAMd,OAAOO,IAAIe,YAAYR,EAAMP,MAYlC,SAASgB,EAASC,GAEvB,IADA,IAAIC,GAAc,EACZb,IAAmBa,GACvBb,EAAiBc,EAAkBd,GAE/BY,EAASG,gBAAkB,IAC7BF,GAAc,IAGXb,GAAkBH,IAvDzBE,EAAUQ,QAAQN,GAClBA,EAAWJ,EAAQJ,OACnBK,EAAcD,EACdE,EAAY,GACZF,EAAU,MAuDVmB,oBAAoBL,GAwDtB,SAASG,EAAkBZ,GAyBzB,GAvBKA,EAAMP,MACTO,EAAMP,ICvIH,SAAmBO,GAoBxB,IAAIe,EAYJ,OAVEA,EADiB,iBAAff,EAAMX,KACD2B,SAASC,eAAe,IAExBD,SAASE,cAAclB,EAAMX,MAGtCN,OAAOmB,KAAKF,EAAMV,OACfa,OAFgB,SAAAC,GAAG,MAAY,aAARA,IAGvBC,QAAQ,SAACD,GACRW,EAAKX,GAAOJ,EAAMV,MAAMc,KAErBW,EDuGOI,CAAUnB,IAxD1B,SAA4BoB,EAAUC,GAKpC,IAJA,IAAIC,EAAM,EACNC,EAAWH,EAAS1B,WAAa0B,EAAS1B,UAAUH,MAEpDiC,EAAc,KACZD,GAAYD,EAAMD,EAASI,QAAQ,CACvC,IAAMC,EAAUL,EAASC,GAErBK,EAAW,KACTC,EACJL,GACAG,GACAA,EAAQrC,OAASkC,EAASlC,KAExBuC,KACFD,EAAW,IAAI7C,EAAM4C,EAASN,IACrB1B,UAAY6B,EACrBI,EAASlC,IAAM8B,EAAS9B,IACxBkC,EAAS1B,UAAY,UAEnByB,IAAYE,KACdD,EAAW,IAAI7C,EAAM4C,EAASN,IACrB1B,UAAY,KACrBiC,EAAS1B,UAAY,OAEnBsB,IAAaK,IACfL,EAAStB,UAAY,SACrBJ,EAAUgC,KAAKN,IAGL,IAARD,IACFF,EAAS7B,MAAQoC,GAEfH,IACFA,EAAYhC,QAAUmC,GAExBH,EAAcG,EAEVJ,IACFA,EAAWA,EAAS/B,SAEtB8B,KAkCFQ,CAAmB9B,EAAOA,EAAMV,MAAMyC,UAGlC/B,EAAMT,MACR,OAAOS,EAAMT,MAKf,IAFA,IAAIyC,EAAYhC,EAETgC,GAAW,CAChB,GAAIA,EAAUxC,QACZ,OAAOwC,EAAUxC,QAEnBwC,EAAYA,EAAU9C,QElK1B,IAAM+C,EAAS,CACbf,cCoBK,SAAuB7B,EAAMC,GAClC,GA1B2B4C,EA0BH7C,EAzBjBN,OAAOoD,UAAUC,SAASC,KAAKH,GAAGI,QAAQ,aAAe,EA2B9D,OAxBJ,SAA0BJ,GACxB,OAAOA,EAAEC,UAAUI,cAAgBL,EAuB7BM,CAAiBnD,GACZ,IAAIA,EAAKC,GAETD,EAAKC,GANsC,IAzBxD,IAA6B4C,EAyB2BO,EAAAC,UAAAjB,OAAVM,EAAU,IAAAY,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAVb,EAAUa,EAAA,GAAAF,UAAAE,GAStD,MAAO,CACLvD,OACAC,MAAMP,OAAA8D,EAAA,EAAA9D,QAAA8D,EAAA,EAAA9D,CAAA,GACDO,GADA,IAEHyC,SAAUA,EAASe,IAAI,SAACvD,GACtB,MAAwB,kBAAVA,EACVA,EA/BH,CACLF,KAAM,eACNC,MAAO,CACLyD,UA6BwBxD,EA5BxBwC,SAAU,WDPdiB,OFoKK,SAAgB/D,EAAMgE,IAS3BtD,EAAU,IAAIb,EAAM,CAClBO,KAAM,OACNC,MAAO,CACLyC,SAAU,CAAC9C,KAEZ,OACKQ,IAAMwD,EACdtD,EAAQD,UAAYE,EAEpBE,EAAiBH,EACjBmB,oBAAoBL,KElKhByC,EACJjB,EAAAf,cAAA,WACEe,EAAAf,cAAA,mBACAe,EAAAf,cAAA,KAAGiC,GAAG,KACJlB,EAAAf,cAAA,mBAGAe,EAAAf,cAAA,mBAGAe,EAAAf,cAAA,qBAQAkC,EACJnB,EAAAf,cAAA,WACEe,EAAAf,cAAA,mBACAe,EAAAf,cAAA,KAAGiC,GAAG,KACJlB,EAAAf,cAAA,mBAGAe,EAAAf,cAAA,qBAONe,EAAOe,OACLE,EACAlC,SAASqC,eAAe,SAK1BC,WAAW,WACTrB,EAAOe,OACLI,EACApC,SAASqC,eAAe,UAEzB","file":"static/js/main.d5913c95.chunk.js","sourcesContent":["export class Fiber {\n  type = null\n  props = null\n\n  parent = null\n  child = null\n  sibling = null\n\n  dom = null \n\n  alternate = null\n\n  constructor(elem, parent) {\n    this.type = elem.type;\n    this.props = elem.props;\n    this.parent = parent;\n  }\n}\n","import { Fiber} from './fiber';\nimport { createDOM } from './createDOM';\n\nlet wipRoot = null;\nlet currentRoot = null;\nlet deletions = [];\nexport let nextUnitOfWork = null;\n\nexport function setNextUnitOfWork(fiber) {\n  nextUnitOfWork = fiber;\n}\n\nexport function setWIPRoot(fiber) {\n  wipRoot = fiber;\n}\n\nfunction commitRoot() {\n  deletions.forEach(commitWork);\n  commitWork(wipRoot.child);\n  currentRoot = wipRoot;\n  deletions = [];\n  wipRoot = null;\n}\n\nfunction updateDOM(fiber) {\n  // todo - 删除的 props\n  // todo - 新增的 props, 变更的 props\n  // todo - event listener\n  const dom = fiber.dom;\n  const props = fiber.props;\n  Object.keys(props)\n    .filter((key) => key !== 'children')\n    .forEach((key) => {\n      dom[key] = props[key];\n    });\n}\n\nfunction commitWork(fiber) {\n  if (!fiber) return;\n  switch (fiber.effectTag) {\n    case 'UPDATE':\n      updateDOM(fiber);\n      commitWork(fiber.child);\n      commitWork(fiber.sibling);\n      break;\n    case 'ADD':\n      fiber.parent.dom.appendChild(fiber.dom);\n      commitWork(fiber.child);\n      commitWork(fiber.sibling);\n      break;\n    case 'DELETE':\n      fiber.parent.dom.removeChild(fiber.dom);\n      break;\n    default:\n      break;\n  }\n  /*\n  fiber.parent.dom.appendChild(fiber.dom);\n  commitWork(fiber.child);\n  commitWork(fiber.sibling);\n  */\n}\n\nexport function workLoop(deadline) {\n  let shouldYield = false;\n  while(nextUnitOfWork && !shouldYield) {\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n\n    if (deadline.timeRemaining() < 1) {\n      shouldYield = true;\n    }\n\n    if (!nextUnitOfWork && wipRoot) {\n      commitRoot();\n    }\n  }\n  requestIdleCallback(workLoop);\n}\n\nfunction reconcilerChildren(wipFiber, elements) {\n  let idx = 0;\n  let oldFiber = wipFiber.alternate && wipFiber.alternate.child;\n\n  let prevSibling = null;\n  while(oldFiber || idx < elements.length) {\n    const element = elements[idx];\n\n    let newFiber = null;\n    const sameType =\n      oldFiber &&\n      element &&\n      element.type === oldFiber.type\n\n    if (sameType) {\n      newFiber = new Fiber(element, wipFiber);\n      newFiber.alternate = oldFiber;\n      newFiber.dom = oldFiber.dom;\n      newFiber.effectTag = 'UPDATE';\n    }\n    if (element && !sameType) {\n      newFiber = new Fiber(element, wipFiber);\n      newFiber.alternate = null;\n      newFiber.effectTag = 'ADD';\n    }\n    if (oldFiber && !sameType) {\n      oldFiber.effectTag = 'DELETE';\n      deletions.push(oldFiber);\n    }\n\n    if (idx === 0) {\n      wipFiber.child = newFiber;\n    }\n    if (prevSibling) {\n      prevSibling.sibling = newFiber;\n    }\n    prevSibling = newFiber;\n\n    if (oldFiber) {\n      oldFiber = oldFiber.sibling;\n    }\n    idx ++;\n  }\n}\n\n/**\n * \n * @param {*} nextUnitOfWork Fiber\n * the performUnitOfWork function, there we will do three things for each fiber:\n * 1. add the element to the DOM\n * 2. create the fibers for the element’s children\n * 3. select the next unit of work\n */\nfunction performUnitOfWork(fiber) {\n  // 1. 将 Element 添加到 DOM 结点\n  if (!fiber.dom) {\n    fiber.dom = createDOM(fiber);\n  }\n\n  // 2. 给 Child Element 创建 Fiber 结点\n  /*\n  const children = fiber.props.children;\n  let index = 0\n  let prevSibling = null\n  while (index < children.length) {\n    const _fiber = new Fiber(children[index], fiber);\n    if (index === 0) {\n      fiber.child = _fiber;\n    } else {\n      prevSibling.sibling = _fiber;\n    }\n    prevSibling = _fiber;\n    index ++;\n  }\n  */\n  reconcilerChildren(fiber, fiber.props.children);\n\n  // 3. 找出下一个 work unit\n  if (fiber.child) {\n    return fiber.child;\n  }\n\n  let nextFiber = fiber;\n\n  while (nextFiber) {\n    if (nextFiber.sibling) {\n      return nextFiber.sibling;\n    }\n    nextFiber = nextFiber.parent;\n  }\n}\n\nexport function render(elem, container) {\n  /*\n  wipRoot = {\n    dom: container,\n    props: {\n      children: [elem],\n    },\n  }\n  */\n  wipRoot = new Fiber({\n    type: 'Root',\n    props: {\n      children: [elem]\n    }\n  }, null);\n  wipRoot.dom = container;\n  wipRoot.alternate = currentRoot;\n\n  nextUnitOfWork = wipRoot;\n  requestIdleCallback(workLoop);\n}\n","export function createDOM(fiber) {\n  /*\n  let node;\n  if (elem.type === 'TEXT_ELEMENT') {\n    node = document.createTextNode('');\n  } else {\n    node = document.createElement(elem.type);\n  }\n  const isProperty = key => key !== \"children\"\n  Object.keys(elem.props)\n    .filter(isProperty)\n    .forEach((key) => {\n      node[key] = elem.props[key];\n    });\n  elem.props.children.forEach((child) => {\n    render(child, node);\n  });\n  elem.node = node;\n  container.appendChild(elem.node);\n  */\n  let node;\n  if (fiber.type === 'TEXT_ELEMENT') {\n    node = document.createTextNode('');\n  } else {\n    node = document.createElement(fiber.type);\n  }\n  const isProperty = key => key !== \"children\"\n  Object.keys(fiber.props)\n    .filter(isProperty)\n    .forEach((key) => {\n      node[key] = fiber.props[key];\n    });\n  return node;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createElement } from './lib/createElement';\nimport { render } from './lib/concurrent';\n\nconst PReact = {\n  createElement,\n  render,\n}\n\n\n/*\nconst App = function() {\n  return (\n    <div>\n      <h1>title</h1>\n      <p>body</p>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n*/\n\n/** @jsx PReact.createElement */\nconst app = (\n  <div>\n    <h1>title</h1>\n    <p id='1'>\n      <h3>\n        body1\n      </h3>\n      <h3>\n        body2\n      </h3>\n      <h3>\n        body3\n      </h3>\n    </p>\n  </div>\n)\n\n/** @jsx PReact.createElement */\nconst app2 = (\n  <div>\n    <h1>title</h1>\n    <p id='2'>\n      <h4>\n        body4\n      </h4>\n      <h3>\n        body5\n      </h3>\n    </p>\n  </div>\n)\n\nPReact.render(\n  app,\n  document.getElementById('root')\n);\n/*\n*/\n\nsetTimeout(() => {\n  PReact.render(\n    app2,\n    document.getElementById('root')\n  );\n}, 5000);\n/*\n*/\n","\nfunction isFunctionComponent(p) {\n  return Object.prototype.toString.call(p).indexOf('Function') >= 0;\n}\n\nfunction isClassComponent(p) {\n  return p.prototype.constructor === p;\n}\n\nfunction createTextElement(txt) {\n  return {\n    type: 'TEXT_ELEMENT',\n    props: {\n      nodeValue: txt,\n      children: []\n    }\n  }\n}\n\n/**\n * 创建一个 VDOM / Fiber\n * @param {*} type \n * @param {*} props \n * @param  {...any} children \n * @returns \n */\nexport function createElement(type, props, ...children) {\n  if (isFunctionComponent(type)) {\n    // todo - children\n    if (isClassComponent(type)) {\n      return new type(props);\n    } else {\n      return type(props);\n    }\n  }\n  return {\n    type,\n    props: {\n      ...props,\n      children: children.map((child) => {\n        return typeof child === 'object'\n          ? child\n          : createTextElement(child);\n      }),\n    }\n  }\n}\n"],"sourceRoot":""}